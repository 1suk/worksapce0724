-- 실습문제 --
-- 도서관리 프로그램을 만들기 위한 테이블들 만들기 --
-- 이때, 제약조건에 이름을 부여할 것
-- 각 컬럼에 주석 달기

-- 1. 출판사들에 대한 데이터를 담기 위한 출판사 테이블(TB_PUBLISHER)
-- 컬럼 : PUB_NO (출판사 번호) - 기본키 (PUBLISHER_PK)
--        PUB_NAME (출판사명) - NOT NULL (PUBLISHER_NN)
--        PHONE (출판사 전화번호) - 제약조건 없음

DROP TABLE TB_PUBLISHER;
SELECT * FROM TB_PUBLISHER;

CREATE TABLE TB_PUBLISHER(
    PUB_NO NUMBER PRIMARY KEY,
    PUB_NAME VARCHAR(21) CONSTRAINT PUBLISHER_NN NOT NULL,
    PHONE VARCHAR(13)
)

INSERT INTO TB_PUBLISHER(PUB_NO, PUB_NAME, PHONE)
VALUES (1, '김똘똘', '010-1111-1111');

INSERT INTO TB_PUBLISHER(PUB_NO, PUB_NAME, PHONE)
VALUES (2, '김퐁퐁', '010-2222-2222');

INSERT INTO TB_PUBLISHER(PUB_NO, PUB_NAME, PHONE)
VALUES (3, '김빵빵', '010-3333-3333');

-- 2. 도서들에 대한 데이터를 담기 위한 도서 테이블(TB_BOOK)
-- 컬럼 : BK_NO (도서번호) - 기본키 (BOOK_PK)
--        BK_TITLE (도서명) - NOT NULL (BOOK__NN_TITLE)
--        BK_AUTHOR (저자명) - NOT NULL (BOOK__NN_AUTHOR)
--        BK_PRICE (가격) - 제약조건 없음
--        BK_PUB_NO (출판사 번호) - 외래키 (BOOK_FK), TB_PUBLISHER 테이블 참조
--                                 이때 참조하고 있는 부모데이터 삭제 시 자식데이터도 삭제되도록 옵션 지정

-- 샘플 5개 정도 생성
CREATE TABLE TB_BOOK (
    BK_NO NUMBER CONSTRAINT BOOK_PK PRIMARY KEY,
    BK_TITLE VARCHAR2(50) CONSTRAINT BOOK_NN_TITLE NOT NULL,
    BK_AUTHOR VARCHAR2(21) CONSTRAINT BOOK_NN_AUTHOR NOT NULL,
    BK_PRICE   NUMBER,
    BK_PUB_NO  NUMBER,
    CONSTRAINT BOOK_FK FOREIGN KEY (BK_PUB_NO) REFERENCES TB_PUBLISHER(PUB_NO) ON DELETE CASCADE
);

INSERT INTO TB_BOOK (BK_NO, BK_TITLE, BK_AUTHOR, BK_PRICE, BK_PUB_NO) VALUES (1, '혼자 공부하는 자바', '신용권', 30000, 1);
INSERT INTO TB_BOOK (BK_NO, BK_TITLE, BK_AUTHOR, BK_PRICE, BK_PUB_NO) VALUES (2, '자바의 정석', '남궁성', 35000, 2);
INSERT INTO TB_BOOK (BK_NO, BK_TITLE, BK_AUTHOR, BK_PRICE, BK_PUB_NO) VALUES (3, '이것이 자바다', '신용권', 32000, 1);
INSERT INTO TB_BOOK (BK_NO, BK_TITLE, BK_AUTHOR, BK_PRICE, BK_PUB_NO) VALUES (4, '스프링 입문', '코딩셰프', 28000, 3);
INSERT INTO TB_BOOK (BK_NO, BK_TITLE, BK_AUTHOR, BK_PRICE, BK_PUB_NO) VALUES (5, '데이터베이스 개론', '김철수', 25000, 2);

SELECT * FROM TB_BOOK;


-- 3. 회원에 대한 데이터를 담기 위한 회원 테이블(TB_MEMBER)
-- 컬럼 : MEMBER_NO (회원번호) - 기본키 (MEMBER_PK)
--        MEMBER_ID (아이디) - 중복금지 (MEMBER_UQ_ID)
--        MEMBER_PWD (비밀번호) - NOT NULL (MEMBER_NN_PWD)
--        MEMBER_NAME (회원명) - NOT NULL (MEMBER_NN_NAME)
--        GENDER (성별) - M 또는 F로 제한 (MEMBER_CK_GEN)
--        ADDRESS (주소) - 제약조건 없음
--        PHONE (연락처) - 제약조건 없음
--        STATUS (탈퇴여부) - 기본값 N, N 또는 Y만 허용 (MEMBER_CK_STA)
--        ENROLL_DATE (가입일) - 기본값 SYSDATE, NOT NULL (MEMBER_NN_EN)
SELECT * FROM TB_MEMBER;
DROP TABLE TB_MEMBER;

CREATE TABLE TB_MEMBER(
    MEMBER_NO NUMBER PRIMARY KEY,
    MEMBER_ID VARCHAR2(30) CONSTRAINT MEMBE_UQ_ID UNIQUE,
    MEMBER_PWD VARCHAR2(30) CONSTRAINT MEMBER_NN_PWD NOT NULL,
    MEMBER_NAME VARCHAR2(21) CONSTRAINT MEMBER_NN_NAME NOT NULL,
    GENDER CHAR(3) CONSTRAINT MEMBER_CK_GEN CHECK(GENDER IN ('남','여')),
    ADDRESS VARCHAR2(50),
    PHONE VARCHAR2(13),
    STATUS CHAR(1)DEFAULT 'N' CONSTRAINT MEMBER_CK_STA CHECK(STATUS IN ('N','Y')),
    ENROLL_DATE DATE DEFAULT SYSDATE CONSTRAINT MEMBER_NN_EN NOT NULL
);

INSERT INTO TB_MEMBER (MEMBER_NO, MEMBER_ID, MEMBER_PWD, MEMBER_NAME, GENDER, ADDRESS, PHONE, STATUS, ENROLL_DATE)
VALUES (1, 'user01', 'pass1234', '홍길동', '남', '서울시 강남구', '010-1111-1111', 'N', SYSDATE);

INSERT INTO TB_MEMBER (MEMBER_NO, MEMBER_ID, MEMBER_PWD, MEMBER_NAME, GENDER, ADDRESS, PHONE, STATUS, ENROLL_DATE)
VALUES (2, 'user02', 'qwer5678', '김영희', '여', '부산시 해운대구', '010-2222-2222', 'N', SYSDATE);

INSERT INTO TB_MEMBER (MEMBER_NO, MEMBER_ID, MEMBER_PWD, MEMBER_NAME, GENDER, ADDRESS, PHONE, STATUS, ENROLL_DATE)
VALUES (3, 'test99', 'zxcv1357', '이철수', '남', '대구시 중구', '010-3333-3333', 'Y', SYSDATE);

INSERT INTO TB_MEMBER (MEMBER_NO, MEMBER_ID, MEMBER_PWD, MEMBER_NAME, GENDER, ADDRESS, PHONE, STATUS, ENROLL_DATE)
VALUES (4, 'skyblue', 'mypass01', '박지민', '여', '인천시 남동구', '010-4444-4444', 'N', SYSDATE);

INSERT INTO TB_MEMBER (MEMBER_NO, MEMBER_ID, MEMBER_PWD, MEMBER_NAME, GENDER, ADDRESS, PHONE, STATUS, ENROLL_DATE)
VALUES (5, 'hello77', 'abcd1234', '최민수', '남', '광주시 서구', '010-5555-5555', 'Y', SYSDATE);

-- 4. 어떤 회원이 어떤 도서를 대여했는지에 대한 대여목록 테이블(TB_RENT)
-- 컬럼 : RENT_NO (대여번호) - 기본키 (RENT_PK)
--        RENT_MEM_NO (대여회원번호) - 외래키 (RENT_FK_MEM), TB_MEMBER 참조
--                                     부모 데이터 삭제 시 자식데이터 값이 NULL이 되도록 지정
--        RENT_BOOK_NO (대여도서번호) - 외래키 (RENT_FK_BOOK), TB_BOOK 참조
--                                      부모 데이터 삭제 시 자식데이터 값이 NULL이 되도록 지정
--        RENT_DATE (대여일) - 기본값 SYSDATE

-- 샘플 3개 정도 생성
SELECT * FROM TB_RENT;

CREATE TABLE TB_RENT(
    RENT_NO NUMBER PRIMARY KEY,
    RENT_MEM_NO NUMBER,
    RENT_BOOK_NO NUMBER,
    RENT_DATE DATE DEFAULT SYSDATE,
    CONSTRAINT RENT_FK_MEM FOREIGN KEY(RENT_MEM_NO) REFERENCES TB_MEMBER(MEMBER_NO) ON DELETE SET NULL,
    CONSTRAINT RENT_FK_BOOK FOREIGN KEY(RENT_BOOK_NO) REFERENCES TB_BOOK(BK_NO) ON DELETE SET NULL
)

-- 1번 회원이 1번 도서를 대여
INSERT INTO TB_RENT (RENT_NO, RENT_MEM_NO, RENT_BOOK_NO)
VALUES (1, 1, 1);

-- 2번 회원이 3번 도서를 대여
INSERT INTO TB_RENT (RENT_NO, RENT_MEM_NO, RENT_BOOK_NO)
VALUES (2, 2, 3);

-- 3번 회원이 2번 도서를 대여
INSERT INTO TB_RENT (RENT_NO, RENT_MEM_NO, RENT_BOOK_NO)
VALUES (3, 3, 2);


-- 대여목록 조회
-- TB_RENT, TB_MEMBER, TB_BOOK 테이블을 JOIN하여 대여 정보를 조회
SELECT RENT_NO, MEMBER_NAME ,BK_TITLE, RENT_DATE
FROM TB_RENT
JOIN TB_MEMBER ON (MEMBER_NO = RENT_MEM_NO)
JOIN TB_BOOK ON (BK_NO = RENT_BOOK_NO);
